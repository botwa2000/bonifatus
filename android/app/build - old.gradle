def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "com.example.bonifatus"
    compileSdk 34
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.bonifatus"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    lint {
        disable 'InvalidPackage'
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.multidex:multidex:2.0.1'
}

// Create output directory for Flutter APK
tasks.register("createFlutterApkDir") {
    doLast {
        def flutterApkDir = new File("${project.rootDir}/../build/app/outputs/flutter-apk")
        if (!flutterApkDir.exists()) {
            flutterApkDir.mkdirs()
        }
    }
}

// Copy APK to Flutter's expected location
tasks.register("copyFlutterApk") {
    doLast {
        def sourceApk = new File("${project.buildDir}/outputs/apk/debug/app-debug.apk")
        def targetDir = new File("${project.rootDir}/../build/app/outputs/flutter-apk")
        if (sourceApk.exists()) {
            copy {
                from sourceApk
                into targetDir
            }
        }
    }
}

afterEvaluate {
    tasks.named("assembleDebug").configure {
        dependsOn "createFlutterApkDir"
        finalizedBy "copyFlutterApk"
    }
}